/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { TextField, Button, Link as MUILink } from '@mui/material';
import LogoImage from 'src/assets/images/Authentication5_Logo.png';
import { styled } from '@mui/material/styles';
import ScreenDesktopImageImage from 'src/assets/images/Authentication5_Screen_Desktop.png';
import CloseButtonFrame from 'src/components/CloseButtonFrame/CloseButtonFrame';
import useAuthentication5 from 'src/components/Authentication5/useAuthentication5';

const ScreenDesktop = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ data }) => ({
  backgroundImage: `url(${ScreenDesktopImageImage})`,
  backgroundPosition: `center`,
  backgroundSize: `cover`,
  backgroundRepeat: `no-repeat`,
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  width: '100%',
  justifyContent: `center`,
  alignItems: `flex-start`,
  padding: data.currentVariant === 'ScreenMobile' ? `100px 0px` : `195px 0px`,
  boxSizing: `border-box`,
  overflow: `hidden`,
  height: 'auto',
}));

const LogIn = styled('div')(({ theme }) => ({
  backgroundColor: theme.palette['Background']['Background'],
  boxShadow: theme.customShadows['cardShadow'].boxShadow,
  border: `1px solid rgba(0, 0, 0, 0.12)`,
  boxSizing: `border-box`,
  borderRadius: `16px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `center`,
  alignItems: `center`,
  padding: `50px 40px`,
  alignSelf: `stretch`,
  margin: `0px`,
  overflow: `hidden`,
}));

const CloseButtonFrame1 = styled(CloseButtonFrame)(({ theme }) => ({
  width: `320px`,
  margin: `0px`,
}));

const Top = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `40px 0px 0px 0px`,
});

const Logo = styled('img')({
  height: `62.23px`,
  width: `48.38px`,
  objectFit: `cover`,
  margin: `0px`,
});

const LogInToYourAccount = styled('div', {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ theme, data }) => ({
  textAlign: `center`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Primary'],
  fontStyle:
    data.currentVariant === 'ScreenMobile'
      ? theme.typography['Typography']['H6'].fontStyle
      : theme.typography['Typography']['H5'].fontStyle,
  fontFamily:
    data.currentVariant === 'ScreenMobile'
      ? theme.typography['Typography']['H6'].fontFamily
      : theme.typography['Typography']['H5'].fontFamily,
  fontWeight:
    data.currentVariant === 'ScreenMobile'
      ? theme.typography['Typography']['H6'].fontWeight
      : theme.typography['Typography']['H5'].fontWeight,
  fontSize:
    data.currentVariant === 'ScreenMobile'
      ? theme.typography['Typography']['H6'].fontSize
      : theme.typography['Typography']['H5'].fontSize,
  letterSpacing:
    data.currentVariant === 'ScreenMobile'
      ? theme.typography['Typography']['H6'].letterSpacing
      : theme.typography['Typography']['H5'].letterSpacing,
  lineHeight:
    data.currentVariant === 'ScreenMobile'
      ? theme.typography['Typography']['H6'].lineHeight
      : theme.typography['Typography']['H5'].lineHeight,
  textDecoration:
    data.currentVariant === 'ScreenMobile'
      ? theme.typography['Typography']['H6'].textDecoration
      : theme.typography['Typography']['H5'].textDecoration,
  textTransform:
    data.currentVariant === 'ScreenMobile'
      ? theme.typography['Typography']['H6'].textTransform
      : theme.typography['Typography']['H5'].textTransform,
  margin: `30px 0px 0px 0px`,
}));

const Input1 = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `40px 0px 0px 0px`,
});

const TextFieldStandard = styled(TextField, {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ theme, data }) => ({
  alignSelf: `stretch`,
  margin: `0px`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: theme.typography['Components']['Label'].fontStyle,
  fontFamily: theme.typography['Components']['Label'].fontFamily,
  fontWeight: theme.typography['Components']['Label'].fontWeight,
  fontSize: theme.typography['Components']['Label'].fontSize,
  letterSpacing: theme.typography['Components']['Label'].letterSpacing,
  lineHeight: theme.typography['Components']['Label'].lineHeight,
  textDecoration: theme.typography['Components']['Label'].textDecoration,
  textTransform: theme.typography['Components']['Label'].textTransform,
}));

const TextFieldStandard1 = styled(TextField, {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ theme, data }) => ({
  alignSelf: `stretch`,
  margin: `30px 0px 0px 0px`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: theme.typography['Components']['Label'].fontStyle,
  fontFamily: theme.typography['Components']['Label'].fontFamily,
  fontWeight: theme.typography['Components']['Label'].fontWeight,
  fontSize: theme.typography['Components']['Label'].fontSize,
  letterSpacing: theme.typography['Components']['Label'].letterSpacing,
  lineHeight: theme.typography['Components']['Label'].lineHeight,
  textDecoration: theme.typography['Components']['Label'].textDecoration,
  textTransform: theme.typography['Components']['Label'].textTransform,
}));

const Btm = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `40px 0px 0px 0px`,
});

const ButtonContained = styled(Button, {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ theme, data }) => ({
  alignSelf: `stretch`,
  margin: `0px`,
  color: theme.palette['Primary']['Contrast'],
  fontStyle: theme.typography['Components']['Button Font - Large'].fontStyle,
  fontFamily: theme.typography['Components']['Button Font - Large'].fontFamily,
  fontWeight: theme.typography['Components']['Button Font - Large'].fontWeight,
  fontSize: theme.typography['Components']['Button Font - Large'].fontSize,
  letterSpacing:
    theme.typography['Components']['Button Font - Large'].letterSpacing,
  lineHeight: theme.typography['Components']['Button Font - Large'].lineHeight,
  textDecoration:
    theme.typography['Components']['Button Font - Large'].textDecoration,
  textTransform:
    theme.typography['Components']['Button Font - Large'].textTransform,
}));

const Txt = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `24px 0px 0px 0px`,
});

const HavingTroubleLogging = styled('div')(({ theme }) => ({
  textAlign: `center`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: theme.typography['Typography']['Body 2'].fontStyle,
  fontFamily: theme.typography['Typography']['Body 2'].fontFamily,
  fontWeight: theme.typography['Typography']['Body 2'].fontWeight,
  fontSize: theme.typography['Typography']['Body 2'].fontSize,
  letterSpacing: theme.typography['Typography']['Body 2'].letterSpacing,
  lineHeight: theme.typography['Typography']['Body 2'].lineHeight,
  textDecoration: theme.typography['Typography']['Body 2'].textDecoration,
  textTransform: theme.typography['Typography']['Body 2'].textTransform,
  margin: `0px`,
}));

const Link1 = styled(MUILink, {
  shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
})(({ theme, data }) => ({
  margin: `4px 0px 0px 0px`,
  color: theme.palette['Primary']['Main'],
  fontStyle: theme.typography['Typography']['Body 2 Link'].fontStyle,
  fontFamily: theme.typography['Typography']['Body 2 Link'].fontFamily,
  fontWeight: theme.typography['Typography']['Body 2 Link'].fontWeight,
  fontSize: theme.typography['Typography']['Body 2 Link'].fontSize,
  letterSpacing: theme.typography['Typography']['Body 2 Link'].letterSpacing,
  lineHeight: theme.typography['Typography']['Body 2 Link'].lineHeight,
  textDecoration: `'initial'`,
  textTransform: theme.typography['Typography']['Body 2 Link'].textTransform,
}));

function Authentication5(props) {
  const { data } = useAuthentication5();

  return (
    <ScreenDesktop className={props.className} data={data}>
      <LogIn>
        <CloseButtonFrame1 />
        <Top>
          <Logo src={LogoImage} loading="lazy" alt={'Logo'} />
          <LogInToYourAccount data={data}>
            {`Log In to your Account`}
          </LogInToYourAccount>
        </Top>
        <Input1>
          <TextFieldStandard
            size={'medium'}
            disabled={false}
            multiline={false}
            data={data}
            label={'User Name'}
          />
          <TextFieldStandard1
            size={'medium'}
            disabled={false}
            multiline={false}
            data={data}
            label={'Password'}
          />
        </Input1>
        <Btm>
          <ButtonContained
            variant="contained"
            size={'large'}
            color={'primary'}
            disabled={false}
            data={data}
          >
            {'Log IN'}
          </ButtonContained>
          <Txt>
            <HavingTroubleLogging>
              {`Having trouble logging in?`}
            </HavingTroubleLogging>
            <Link1
              color={'primary'}
              disabled={false}
              underline={'always'}
              data={data}
            >
              {'Forgot Password'}
            </Link1>
          </Txt>
        </Btm>
      </LogIn>
    </ScreenDesktop>
  );
}

export default Authentication5;
